import sys
from PyQt5.QtCore import pyqtSlot, QTimer
from PyQt5 import QtCore
from PyQt5.QtWidgets import QApplication,QDialog
from PyQt5 import uic, QtWidgets
import RPi.GPIO as GPIO
import Adafruit_DHT
from time import sleep
import threading

class Adafruit_DHT_Worker(QtCore.QObject):
    sensor = Adafruit_DHT.DHT11
    DHT11_pin = 23
    valueChanged = QtCore.pyqtSignal(float, float)

    def start(self):
	myThread = threading.Thread(target=self._read)
	myThread.daemon = True
        myThread.start()

    def _read(self):
	while True:
		sleep(1)
	        humidity, temperature = Adafruit_DHT.read_retry(self.sensor, self.DHT11_pin)
	        if humidity is not None and temperature is not None:
         	   self.valueChanged.emit(temperature, humidity)

class HMI(QtWidgets.QMainWindow):
        temperature = 0
	humidity = 0
	SERVO_PWM_PIN = 11
	PIN_LEDPWM = 8
	def __init__(self):
		super(HMI, self).__init__()
		self.setWindowTitle("CVS HMI")
		uic.loadUi('mainwindow.ui', self)
		
		GPIO.setmode(GPIO.BOARD)
		GPIO.setwarnings(False)
		self.servo_init()
		self.servoRotate_PB.clicked.connect(self.servo_rotate)
		
		self.led_init()	
		self.led_brightness_slider.valueChanged.connect(self.change_brightness)

		#self.qTimer = QTimer()
		#self.qTimer.setInterval(2000)
		#self.qTimer.timeout.connect(self.update)
		#self.qTimer.start()

		self.dht_worker = Adafruit_DHT_Worker()
		self.dht_worker.valueChanged.connect(self.on_dht_changed)
		self.dht_worker.start()	

	def led_init(self):
		GPIO.setup(self.PIN_LEDPWM, GPIO.OUT)
		self.led_intensity = GPIO.PWM(self.PIN_LEDPWM, 100)
		self.led_intensity.start(0)

	def servo_init(self):
		GPIO.setup(self.SERVO_PWM_PIN, GPIO.OUT)
		self.servo_pwm = GPIO.PWM(self.SERVO_PWM_PIN, 50)
		self.servo_pwm.start(2)

	@QtCore.pyqtSlot(float, float)
	def on_dht_changed(self, temperature, humidity):
		self.lcdTemperature.display(temperature)
		self.lcdHumidity.display(humidity)

	@pyqtSlot()
	def servo_rotate(self):
	    angle_val = float(self.servoAngle_EL.text())
	    if angle_val < 0 or angle_val > 180:
	        print("put angle between 0-180")
	    else:
	        self.servo_pwm.ChangeDutyCycle ( (1.0/18.0 * angle_val) + 2)
	
	@pyqtSlot()
	def change_brightness(self):
		led_val = int(self.led_brightness_slider.value())
		self.led_intensity.ChangeDutyCycle(led_val)

app = QtWidgets.QApplication(sys.argv)
w = HMI()
w.show()
app.exec_()
